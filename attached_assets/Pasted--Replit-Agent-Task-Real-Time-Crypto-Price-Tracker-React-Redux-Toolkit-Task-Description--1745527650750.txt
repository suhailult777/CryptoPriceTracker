# Replit Agent Task: Real-Time Crypto Price Tracker (React + Redux Toolkit)

## Task Description:

Build a responsive React application that simulates a real-time cryptocurrency price tracker, similar to CoinMarketCap. The application must manage all state using Redux Toolkit and simulate real-time updates without relying on actual external APIs for the core requirement (though bonus for integrating one).

## Objective:

Develop a front-end application that displays a table of cryptocurrency data with simulated live updates, demonstrating proficiency in React, Redux Toolkit, and state management for dynamic UIs.

## Technical Requirements:

### UI Table:

* Display a table with data for at least 5 sample cryptocurrency assets (e.g., BTC, ETH, USDT, XRP, ADA).
* The table must include the following columns:
    * `#` (Rank/Index)
    * `Logo` (Sample image or icon)
    * `Name` (e.g., Bitcoin)
    * `Symbol` (e.g., BTC)
    * `Price` (Numeric value, e.g., $60,000.00)
    * `1h %` (Percentage change in last 1 hour, e.g., +1.25%)
    * `24h %` (Percentage change in last 24 hours)
    * `7d %` (Percentage change in last 7 days)
    * `Market Cap` (Numeric value, e.g., $1.2 Trillion)
    * `24h Volume` (Numeric value, e.g., $30 Billion)
    * `Circulating Supply` (Numeric value)
    * `Max Supply` (Numeric value or N/A)
    * `7D Chart` (A small static SVG or image representing price trend over 7 days - actual data not required).
* Use sample, hardcoded, or mocked initial crypto data.
* Color-code the percentage change columns (`1h %`, `24h %`, `7d %`):
    * Green for positive values.
    * Red for negative values.
    * (Optional: Grey/Black for zero).
* Ensure the table is responsive and usable on different screen sizes.

### Real-Time Updates Simulation:

* Simulate real-time price updates using `setInterval` or a mocked class that emulates a WebSocket connection.
* Every 1-2 seconds, the simulated updates should randomly change the values for the following fields for *some* or *all* assets:
    * `Price`
    * `1h %`, `24h %`, `7d %`
    * `24h Volume`
* Updates must be dispatched as Redux actions. Avoid using local component state (`useState`) for data that should be globally managed (i.e., the crypto asset data).

### Redux State Management:

* Utilize Redux Toolkit (`@reduxjs/toolkit`) for state management.
* Configure the Redux store using `configureStore`.
* Define a slice for the crypto data using `createSlice`. This slice should handle the initial loading of data and the simulated update actions.
* Store all the cryptocurrency asset data (the table rows) within the Redux store.
* Use Redux selectors (`useSelector`) to efficiently retrieve data in components and minimize unnecessary re-renders.

## Deliverables:

1.  **GitHub/GitLab Repository:** A link to a public repository containing the full source code.
    * Must include a `README.md` file with:
        * Clear setup and running instructions.
        * A brief description of the tech stack and application architecture (how Redux is used, simulation logic).
        * An embedded GIF or a link to a video demonstrating the application's functionality (especially the live updates).
2.  **Working Application:** The application must be runnable and demonstrate the real-time update simulation and Redux state management.

## Bonus (Optional Enhancements):

* **Real WebSocket Integration:** Replace the simulation with a connection to a real cryptocurrency WebSocket API (e.g., Binance, Coinbase Pro, etc.) to fetch live data.
* **Filters/Sorting:** Implement features to filter assets (e.g., by top gainers, losers) or sort the table by different columns (Price, Market Cap, % Change).
* **localStorage Support:** Persist the user's preferences or potentially recent data using `localStorage`.
* **Unit Tests:** Write unit tests for Redux reducers and selectors.
* **TypeScript:** Implement the project using TypeScript for improved type safety.